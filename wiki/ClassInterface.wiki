#summary Darts clone のインタフェース．
#labels Phase-Design

= はじめに =

Darts および Darts clone は，それぞれ単一の C++ ヘッダファイルとして提供されます．
そのため，提供されているヘッダを include するだけで利用できます．
各ヘッダはテンプレートクラスを提供するとともに，一般的な設定に対する別名 Darts::DoubleArray を提供します．

Darts::DoubleArray の基本的な機能のみを利用する場合，Darts と Darts clone のインタフェースはとても似ています．
ただし，基礎となっているクラスのインタフェースには，いくつかの違いがあります．
以下，Darts clone が提供するクラスについて説明します．

== 通常の利用方法 ==

Darts と同様に，通常は Darts::DoubleArray を使用します．
ただし，非常に大規模なキー集合を扱う場合は Darts::HugeDoubleArray を使用します．
キー数が 200 万件を超えることが予想される状況では，Darts::HugeDoubleArray の使用を検討してください．

{{{
namespace Darts {

typedef Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int> DoubleArray;
typedef Darts::DoubleArrayImpl<char, unsigned char, int, unsigned long long> HugeDoubleArray;

}  // namespace Darts
}}}

= 基本クラス =

Darts::DoubleArray や Darts::HugeDoubleArray は Darts::DoubleArrayImpl の別名であり，すべての機能は Darts::DoubleArrayImpl により提供されています．

{{{
namespace Darts {

template <typename CharType, typename UCharType, typename ValueType,
	typename BaseType, typename LengthFunc = DefaultLengthFunc<CharType> >
class DoubleArrayImpl {
public:
	typedef CharType char_type;
	typedef UCharType uchar_type;
	typedef ValueType value_type;
	typedef BaseType base_type;

	// For compatibility.
	typedef CharType key_type;
	typedef ValueType result_type;

	struct result_pair_type {
		value_type value;
		size_t length;
	};

	DoubleArrayImpl();
	~DoubleArrayImpl();

	// For compativility.
	void set_array(const void *ptr, size_t = 0);
	const void *array() const;
	size_t size() const;
	size_t nonzero_size() const;

	void set_unit_array(const unit_type *unit);
	void set_tail_array(const uchar_type *tail);
	const unit_type *unit_array() const;
	const uchar_type *tail_array() const;

	void clear();

	size_t unit_size() const;
	size_t unit_num() const;
	size_t unit_total_size() const;
	size_t unused_unit_num() const;

	size_t tail_size() const;
	size_t tail_length() const;
	size_t tail_total_size() const;

	size_t total_size() const;

	int build(size_t num_of_keys, const char_type * const *keys,
		const size_t *lengths = 0, const value_type *values = 0);
	template <typename ProgressFunc>
	int build(size_t num_of_keys, const char_type * const *keys,
		const size_t *lengths, const value_type *values, ProgressFunc progress_func);

	// For compatibility (to skip an integer zero and a null pointer).
	int build(size_t num_of_keys, const char_type * const *keys,
		const size_t *lengths, const value_type *values, int null_pointer);
	template <typename ProgressFunc>
	int build(size_t num_of_keys, const char_type * const *keys,
		const size_t *lengths, const value_type *values, ProgressFunc *progress_func);

	int open(const char *file, const char *mode = "rb", size_t offset = 0, size_t size = 0);
	int save(const char *file, const char *mode = "wb", size_t offset = 0) const;

	template <class ResultType>
	int exactMatchSearch(const char_type *key,
		ResultType &result, size_t length = 0, base_type da_index = 0) const;
	template <class ResultType>
	ResultType exactMatchSearch(const char_type *key,
		size_t length = 0, base_type da_index = 0) const;

	template <typename ResultType>
	size_t commonPrefixSearch(const char_type *key, ResultType *results,
		size_t max_num_of_results, size_t length = 0, base_type da_index = 0) const;

	value_type traverse(const char_type *key, size_t &da_index,
		size_t &key_index, size_t length = 0) const;
	value_type traverse(const char_type *key, base_type &da_index,
		size_t &key_index, size_t length = 0) const;
};

}  // namespace Darts
}}}

== 基本クラスのテンプレート引数 ==

Darts と Darts clone では，基本クラス Darts::DoubleArrayImpl のテンプレート引数が異なります．
使用する場合は以下の表を参考にしてください．

|| *引数名* || *別名* || *説明* ||
|| CharType || char_type || キーを構成する要素の型です．通常は char を指定します． ||
|| UCharType || uchar_type || CharType に対応する符号なし整数の型です．トライのラベルとしても使用されます．通常は unsigned char を指定します． ||
|| ValueType || value_type || 各キーに持たせるレコードの型です．POD type として使用できる型を指定してください． ||
|| BaseType || base_type || ダブル配列を構成する要素の型です．符号なし整数を指定する必要があります．32-bit もしくは 64-bit 符号なし整数を指定することができます． ||
|| LengthFunc || || キーもしくはテキストの長さに 0 を指定したとき，長さを計算するために呼び出される関数オブジェクトです．通常は指定する必要がありません． ||

== 基本クラスの提供する型 ==

基本クラス Darts::DoubleArrayImpl は，検索結果を受け取るためのクラス Darts::DoubleArrayImpl::result_pair_type を提供します．
メソッド exactMatchSearch() および commonPrefixSearch() では，Darts::DoubleArrayImpl::value_type と Darts::DoubleArrayImpl::result_pair_type の両方を同じように扱えます．

{{{
struct result_pair_type {
	value_type value;
	size_t length;
};
}}}

検索条件に一致するキーが見つからない場合，value に {{{static_cast<value_type>(-1)}}} が格納され，length には 0 が格納されます．
一方，一致するキーが見つかった場合，value に一致したキーのレコードが格納され，length には一致したキーの長さが格納されます．

== 基本クラスのメソッド ==

基本的に本家の Darts::DoubleArrayImpl と同じように振舞いますが，一部のメソッドに制限が加わったり，入力可能な型が追加されていたりします．
また，いくつか新しいメソッドが追加されています．

多くのメソッドは，成功すれば 0，失敗すれば -1 を返すように設計されています．

作成中です．

=== 構築用のメソッド ===

{{{
DoubleArrayImpl();
}}}

{{{
int build(size_t num_of_keys, const char_type * const *keys,
	const size_t *lengths = 0, const value_type *values = 0);
}}}

引数の省略を許容するために用意されたメソッドです．
次のメソッド build() を呼び出すだけであり，特に意識する必要はありません．

{{{
template <typename ProgressFunc>
int build(size_t num_of_keys, const char_type * const *keys
	const size_t *lengths, const value_type *values, ProgressFunc progress_func);
}}}

num_of_keys に登録するキー数，keys には各キーへのポインタの配列，
lengths には各キーの長さの配列，values には各キーに関連付ける値の配列を指定します．
progress_func には，構築状況の表示に用いる関数もしくは関数オブジェクトを指定します．

キーは辞書順に整列されている必要があります．
values は負の値であっても構いません．
同じキーが複数ある場合，後に出現した方に対応する値が採用されます．

lengths, values, progress_func は省略可能です．
lengths を省略すると，各キーの長さは LengthFunc により計算されます．
values を省略すると，各キーには何番目のキーなのかが関連付けられます．
progress_func を省略すると，何もしない関数オブジェクトを採用します．

表示関数 progress_func には，2 つの size_t 型の整数が引数として渡されます．
1 つ目は構築できたキーの数，2 つ目は全体のキー数です．

{{{
int build(size_t num_of_keys, const char_type * const *keys,
	const size_t *lengths, const value_type *values, int null_pointer);
}}}

従来のインタフェースでは関数ポインタを受け取るように設計されていたため，NULL ポインタの代わりに整数 0 を渡される可能性があります．
そのような場合でも正しく処理をおこなうために用意されたメソッドです．

0 が与えられたときはデフォルトの関数オブジェクトを使用してダブル配列の構築をおこないます．
0 以外の整数が与えられたときはエラー扱いになります．

{{{
template <typename ProgressFunc>
int build(size_t num_of_keys, const char_type * const *keys,
	const size_t *lengths, const value_type *values, ProgressFunc *progress_func);
}}}

NULL ポインタを関数ポインタとして受け取るためのメソッドです．
NULL ポインタが与えられたときはデフォルトの関数オブジェクトを使用してダブル配列の構築をおこないます．
それ以外の場合，与えられた関数ポインタを使用してダブル配列の構築をおこないます．

=== ファイル入出力用のメソッド ===

{{{
int open(const char *file, const char *mode = "rb", size_t offset = 0, size_t size = 0);
}}}

ダブル配列をファイルから入力します．
file には入力ファイル名，mode には std::file() に渡す引数を指定します．
offset にはダブル配列の書き込み位置を指定するようになっています．
size にはダブル配列のサイズをバイト単位で指定することができますが，正当性の確認にのみ使用されます．
実際に読み込むバイト数には影響ありません．

{{{
int save(const char *file, const char *mode = "wb", size_t offset = 0) const;
}}}

ダブル配列をファイルに出力します．
file には出力ファイル名，mode には std::fopen() に渡す引数を指定します．
offset を指定すると，ファイルの先頭 offset バイトをスキップした後でダブル配列をファイルに書き込みます．

=== 検索用のメソッド ===

{{{
template <typename ResultType>
int exactMatchSearch(const char_type *key, ResultType &result, size_t length = 0, base_type da_index = 0) const
}}}

入力文字列に完全一致するキーが登録されているかどうかを確認します．

key には入力文字列，result には結果を受け取るためのオブジェクト，
length には入力文字列の長さを指定します．
length を省略すると，入力文字列の長さは LengthFunc により計算されます．
da_index には，traverse() により取得した検索位置を指定できます．

ResultType には，Darts::DoubleArrayImpl::value_type と Darts::DoubleArrayImpl::result_pair_type を指定できます．
value_type を指定すると，キーと対応する値のみを取得できます．
一方，result_pair_type を指定すると，キーと対応する値に加えて，一致したキーの長さを取得できます．

{{{
template <typename ResultType>
ResultType exactMatchSearch(const char_type *key, size_t length = 0, base_type da_index = 0) const;
}}}

入力文字列に完全一致するキーが登録されているかどうかを確認します．
結果を戻り値として受け取る点が上記のメソッドとは異なります．

入力文字列が登録されていなかった場合，本来はキーと対応する値を格納すべき箇所に -1 を格納して返します．

{{{
template <typename ResultType>
size_t commonPrefixSearch(const char_type *key, ResultType *results,
	size_t max_num_of_results, size_t length = 0, base_type da_index = 0) const;
}}}

key には検索文字列，results には検索結果を受け取るための配列を指定します．
max_num_of_results には受け取る検索結果の数，length には検索文字列の長さを指定します．
length を省略すると，入力文字列の長さは LengthFunc により計算されます．
da_index には，traverse() により取得した検索位置を指定できます．

戻り値は検索結果の数（マッチしたキーの数）になります．
各キーに対応する値や各キーの長さは，results を参照することで取得できます．
検索結果の数が max_num_of_results より大きい場合，max_num_of_results 個までを results に格納し，実際の検索結果の数が戻り値になります．

{{{
template <typename IndexType>
value_type traverse(const char_type *key, IndexType &da_index, size_t &key_index, size_t length = 0) const
}}}

互換性のために提供されているメソッドです．
base_type の代替として size_t を許容します．

{{{
value_type traverse(const char_type *key, base_type &da_index, size_t &key_index, size_t length = 0) const
}}}

入力文字列に従ってダブル配列を探索します．

key には入力文字列，length には入力文字列の長さを指定します．
length を省略すると，入力文字列の長さは LengthFunc により計算されます．
da_index にはダブル配列の探索位置，key_index には入力文字列の照合位置を指定します．
初期状態から探索を開始したい場合，da_index と key_index に 0 を格納した状態で呼び出してください．

探索により完全一致するキーがあれば，対応する値を返します．
また，キーの終端に到達した場合は -1 を返し，途中で探索に失敗した場合は -2 を返します．

=== その他のメソッド ===

{{{
void clear();
}}}

ダブル配列を破棄し，確保しているメモリを解放します．

{{{
void set_unit_array(const unit_type *unit);
void set_tail_array(const uchar_type *tail);
}}}

ダブル配列を構成する 2 つの配列の開始アドレスを指定します．
unit_array() と tail_array() により取得した配列を保存したファイルに対して mmap() を用いる場合などに使えます．
Darts::DoubleArrayImpl は，受け取ったメモリを複製したり管理したりしません．

{{{
const unit_type *unit_array() const;
const uchar_type *tail_array() const;
}}}

ダブル配列を構成する 2 つの配列の開始アドレスを返します．

{{{
size_t unit_size() const;
size_t unit_num() const;
size_t unit_total_size() const;
size_t unused_unit_num() const;
size_t tail_size() const;
size_t tail_length() const;
size_t tail_total_size() const;
size_t total_size() const;;
}}}

unit はダブル配列の核となる配列，tail はキーのサフィックスとレコードを格納する配列に対応しており，
各メソッドの戻り値は以下のようになっています．

|| *メソッド* || *戻り値* ||
|| unit_size() || 各要素のサイズ ||
|| unit_num() || 要素数 ||
|| unit_total_size() || unit_size() * unit_num() ||
|| unused_unit_num() || 使われていない要素の数 ||
|| tail_size() || 各要素のサイズ ||
|| tail_length() || 要素数 ||
|| tail_total_size() || tail_size() * tail_length() ||
|| total_size() || unit_total_size() + tail_total_size() ||

=== 互換用のメソッド ===

以下のメソッドは互換性のために提供されています．

{{{
const void *array() const;
}}}

ダブル配列の開始アドレスを返します．
Darts クローンでは 2 つの配列に分割してダブル配列を保持するため，関数を呼び出した時点で 2 つの配列をつなげた配列を作成し，その開始アドレスを返すようになっています．
作成された配列は，ダブル配列が再構築もしくは破棄されるまで保持されます．

{{{
void set_array(const void *ptr, size_t = 0);
}}}

ダブル配列の開始アドレスを指定します．
array() により取得した配列を保存したファイルに対して mmap() を用いる場合などに使えます．
Darts::DoubleArrayImpl は，受け取ったメモリを複製したり管理したりしません．

{{{
size_t size() const;
}}}

ダブル配列の要素数を返します．
実際には，ダブル配列が 1 つの配列により実装されていると仮定し，2 つの配列を連結したときのサイズから逆算した値を返します．

{{{
size_t nonzero_size() const;
}}}

ダブル配列の中で，使用されている要素の数を返します．
size() と同様に，疑似的な値を返します．