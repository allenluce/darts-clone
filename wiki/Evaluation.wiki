#summary 性能評価

= 概要 =

Darts と Darts clone 0.32g の違いを調べるために，
辞書を構築してサイズや検索時間を求めました．
大雑把な結論を述べると，サイズと検索時間について，Darts clone の方が優秀です．

Darts clone による検索が高速な理由としては，
辞書が小さいのでキャッシュの利用効率が高くなることに加えて，
終端ノードの有無をフラグとして各ノードに持たせていることがあります．
ただし，Darts clone では符号なし 32-bit 整数に対してビット演算を
適用してオフセットやラベルを取り出すため，
わずかながらオーバーヘッドが大きいという欠点があります．
他に，traverse() を繰り返し呼び出す処理において，
traverse() をインライン化できず，
検索時間が悪化することがあるという報告もあります．

検索時間については，辞書とキャッシュのサイズ，キャッシュとメモリのレイテンシ，
検索するキーの偏り，コンパイラによるインライン化など，
影響する要素がとても多く，やってみないと分からないという印象です．

= 実験設定 =

Darts と Darts clone により辞書を構築し，
辞書のサイズと構築時間を調査しました．
その後，登録したキーを辞書順に検索する時間，
ランダム順に検索する時間を計測しました．
traverse() については，各キーを 1 バイトずつ
traverse() に渡して探索するのに要した時間になっています．

※ 計測には Darts clone に付属のツール darts-benchmark を使用しました．

== 実験環境 ==

実験環境の OS は 64-bit 版 Ubuntu 9.04 で，コンパイラは gcc 4.3.3 です．

|| *PC 型番* || *CPU 型番* || *CPU 周波数* ||
||Dell Precision T3400||Core 2 Quad Q9550||2.83GHz||

== コーパス ==

実験には，日本語と英語のキー集合に加えて，7 桁郵便番号を使用しました．

|| *語彙 ID* || *出典* || *内容* || *キー数* || *サイズ* || *補足* ||
||JA1||ipadic-2.6.3||見出し語||159,442||2,892,008||漢字かな混じり||
||JA2||日本語版 Wikipedia||タイトル||865,489||18,439,874||タイトル一覧||
||JA3||日本語版 Google N-gram||形態素||2,565,427||50,784,220||unigram のみ||
||EN1||!WordNet-3.0||英語||147,306||1,839,597||英単語||
||EN2||英語版 Wikipedia||タイトル||5,716,820||111,542,495||タイトル一覧||
||EN3||英語版 Google N-gram||単語||13,588,391||125,937,836||unigram のみ||
||DIG||郵便番号辞書||7 桁郵便番号||118,559||948,472||2008 年 6 月 30 日更新版||

各コーパスの詳細については，以下の URL で確認することができます．

 * JA1: http://chasen.aist-nara.ac.jp/chasen/distribution.html.ja
 * JA2: http://download.wikimedia.org/||jawiki-20081127-all-titles-in-ns0
 * JA3: http://googlejapan.blogspot.com/2007/11/n-gram.html
 * EN1: http://wordnet.princeton.edu/
 * EN2: http://download.wikimedia.org/||enwiki-20081008-all-titles-in-ns0
 * EN3: http://googleresearch.blogspot.com/2006/08/all-our-n-gram-are-belong-to-you.html
 * DIG: http://www.post.japanpost.jp/zipcode/download.html

= 実験結果 =

以下のようになりました．

 * 辞書のサイズ：キロバイト単位
 * 構築時間：ナノ秒単位
  * 辞書の構築に要した時間をキー数で割った値を示しています．
 * 検索時間：ナノ秒単位
  * キーを一つ検索するのに要した時間の平均値を示しています．

with zeros は，Darts clone において，
すべてのキーに 0 を関連付けたときの実験結果を示しています．
with zeros 以外は，関連付ける値を指定しなかったときの実験結果を示しています．

|| *corpus* || *version* || *size* || *build* |||| *exactMatchSearch()* |||| *commonPrefixSearch()* |||| *traverse()* ||
|| || || || || *sorted* || *random* || *sorted* || *random* || *sorted* || *random* ||
||JA1||Darts    ||  7,023||  828|| 48.9||170.4|| 64.8||223.4|| 45.5||209.1||
|| ||Darts clone||  3,336||  368|| 33.1|| 76.2|| 43.8|| 91.1|| 52.8||104.5||
|| ||with zeros ||  1,272||  690|| 31.1|| 60.5|| 41.8|| 75.4|| 51.1|| 86.0||
||JA2||Darts    || 84,911||2,950|| 98.4||620.8||135.3||822.4||119.1||774.6||
|| ||Darts clone|| 40,004||1,326|| 94.6||516.4||125.0||533.9||144.6||578.3||
|| ||with zeros || 14,981||2,441||107.2||488.1||134.0||502.3||157.7||546.5||
||JA3||Darts    ||162,689||2,035|| 88.1||693.8||131.2||845.9||109.1||810.8||
|| ||Darts clone|| 76,778||1,181|| 85.8||584.7||109.1||608.1||126.7||627.6||
|| ||with zeros || 25,578||1,797|| 92.8||561.3||117.9||576.9||135.1||608.1||
||EN1||Darts    ||  7,526||1,426|| 70.0||228.5|| 99.4||307.0|| 90.2||285.7||
|| ||Darts clone||  3,527||  747|| 54.7||111.3|| 78.0||139.9|| 97.0||157.4||
|| ||with zeros ||  1,293||  950|| 54.3|| 93.0|| 78.0||122.4|| 96.6||137.1||
||EN2||Darts    ||513,873||2,518|| 90.9||796.9||128.9||977.1||124.3||967.8||
|| ||Darts clone||240,634||1,058|| 88.5||674.2||118.1||717.7||140.6||756.5||
|| ||with zeros || 88,129||2,701||101.0||731.6||131.3||772.0||155.3||817.1||
||EN3||Darts    ||406,358||  927|| 51.9||545.3|| 72.5||646.1|| 63.3||635.8||
|| ||Darts clone||193,324||  421|| 40.5||453.3|| 56.7||512.2|| 70.3||525.4||
|| ||with zeros || 65,628||  899|| 44.2||457.7|| 60.3||500.4|| 75.1||519.6||
||DIG||Darts    ||  2,153||  337|| 18.8|| 40.2|| 26.8|| 57.0|| 43.3|| 83.5||
|| ||Darts clone||  1,067||  337|| 24.2|| 43.9|| 42.6|| 64.9|| 36.2|| 60.7||
|| ||with zeros ||    106||  253|| 24.1|| 37.5|| 36.2|| 48.2|| 35.7|| 49.9||

構築時間については，Darts clone の方が Darts より短くなっています．
ただし，関連付ける値として各キーにユニークな値を指定した場合，
Darts clone の構築時間は，以下のように遅くなります．

|| *corpus* ||JA1||JA2||JA3||EN1||EN2||EN3||DIG||
|| *build* ||1,196||5,942||4,728||2,037||6,666||2,001||843||

値の指定によって構築時間が大きく変化する理由は，
Darts clone が辞書のデータ構造として
Directed Acyclic Word Graph (DAWG) を採用しているからです．
DAWG は値の重複率が高いトライを圧縮するのに適したデータ構造ですが，
DAWG を構築してからダブル配列に変換する必要があります．
特に，値に重複がない場合，トライと DAWG は同じになるので，
構築の手間が増えるだけになってしまいます．
そのため，現在の実装（0.32g beta5）では，値の指定がない場合，
すなわち値が重複しないことが明らかな場合は，
DAWG を経由することなくダブル配列を構築するようにしています．
結果として，値を指定しないときの構築時間が最も短くなっています．

上述の通り，with zeros で辞書が小さくなっている理由も DAWG です．
DAWG はトライの共通部分木を併合して得られるグラフなので，
関連付ける値が同じキーのみを併合することができます．
つまり，各キーに値を関連付ける必要がないときや，
関連付ける値の種類が少ないとき，Darts clone を使うことで，
辞書のサイズをさらに抑えることができます．
